/*
 * Copyright (c) 2017.  | Volodymyr Korobko | volodymyr.korobko@gmail.com
 */

package com.korobko.automotiveapp.server.orm;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.korobko.automotiveapp.restapi.Car;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CAR".
*/
public class CarDao extends AbstractDao<Car, String> {

    public static final String TABLENAME = "CAR";

    /**
     * Properties of entity Car.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property VehicleIN = new Property(0, String.class, "vehicleIN", true, "VEHICLE_IN");
        public final static Property Make = new Property(1, String.class, "make", false, "MAKE");
        public final static Property Type = new Property(2, String.class, "type", false, "TYPE");
        public final static Property Color = new Property(3, String.class, "color", false, "COLOR");
        public final static Property Id_reg_card = new Property(4, String.class, "id_reg_card", false, "ID_REG_CARD");
    }

    private DaoSession daoSession;

    private Query<Car> registrationCard_CarsQuery;

    public CarDao(DaoConfig config) {
        super(config);
    }
    
    public CarDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CAR\" (" + //
                "\"VEHICLE_IN\" TEXT PRIMARY KEY NOT NULL ," + // 0: vehicleIN
                "\"MAKE\" TEXT NOT NULL ," + // 1: make
                "\"TYPE\" TEXT NOT NULL ," + // 2: type
                "\"COLOR\" TEXT NOT NULL ," + // 3: color
                "\"ID_REG_CARD\" TEXT);"); // 4: id_reg_card
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CAR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Car entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getVehicleIN());
        stmt.bindString(2, entity.getMake());
        stmt.bindString(3, entity.getType());
        stmt.bindString(4, entity.getColor());
 
        String id_reg_card = entity.getId_reg_card();
        if (id_reg_card != null) {
            stmt.bindString(5, id_reg_card);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Car entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getVehicleIN());
        stmt.bindString(2, entity.getMake());
        stmt.bindString(3, entity.getType());
        stmt.bindString(4, entity.getColor());
 
        String id_reg_card = entity.getId_reg_card();
        if (id_reg_card != null) {
            stmt.bindString(5, id_reg_card);
        }
    }

    @Override
    protected final void attachEntity(Car entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public Car readEntity(Cursor cursor, int offset) {
        Car entity = new Car( //
            cursor.getString(offset + 0), // vehicleIN
            cursor.getString(offset + 1), // make
            cursor.getString(offset + 2), // type
            cursor.getString(offset + 3), // color
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // id_reg_card
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Car entity, int offset) {
        entity.setVehicleIN(cursor.getString(offset + 0));
        entity.setMake(cursor.getString(offset + 1));
        entity.setType(cursor.getString(offset + 2));
        entity.setColor(cursor.getString(offset + 3));
        entity.setId_reg_card(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Car entity, long rowId) {
        return entity.getVehicleIN();
    }
    
    @Override
    public String getKey(Car entity) {
        if(entity != null) {
            return entity.getVehicleIN();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Car entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "cars" to-many relationship of RegistrationCard. */
    public List<Car> _queryRegistrationCard_Cars(String id_reg_card) {
        synchronized (this) {
            if (registrationCard_CarsQuery == null) {
                QueryBuilder<Car> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id_reg_card.eq(null));
                registrationCard_CarsQuery = queryBuilder.build();
            }
        }
        Query<Car> query = registrationCard_CarsQuery.forCurrentThread();
        query.setParameter(0, id_reg_card);
        return query.list();
    }

}
