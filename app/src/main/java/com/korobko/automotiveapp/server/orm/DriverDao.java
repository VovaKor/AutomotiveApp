package com.korobko.automotiveapp.server.orm;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.korobko.automotiveapp.models.Driver;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DRIVER".
*/
public class DriverDao extends AbstractDao<Driver, String> {

    public static final String TABLENAME = "DRIVER";

    /**
     * Properties of entity Driver.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property FirstName = new Property(1, String.class, "firstName", false, "FIRST_NAME");
        public final static Property LastName = new Property(2, String.class, "lastName", false, "LAST_NAME");
        public final static Property Phone = new Property(3, String.class, "phone", false, "PHONE");
        public final static Property LicenceNumber = new Property(4, String.class, "licenceNumber", false, "LICENCE_NUMBER");
    }

    private DaoSession daoSession;


    public DriverDao(DaoConfig config) {
        super(config);
    }
    
    public DriverDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DRIVER\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"FIRST_NAME\" TEXT NOT NULL ," + // 1: firstName
                "\"LAST_NAME\" TEXT NOT NULL ," + // 2: lastName
                "\"PHONE\" TEXT NOT NULL ," + // 3: phone
                "\"LICENCE_NUMBER\" TEXT NOT NULL );"); // 4: licenceNumber
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DRIVER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Driver entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getFirstName());
        stmt.bindString(3, entity.getLastName());
        stmt.bindString(4, entity.getPhone());
        stmt.bindString(5, entity.getLicenceNumber());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Driver entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getFirstName());
        stmt.bindString(3, entity.getLastName());
        stmt.bindString(4, entity.getPhone());
        stmt.bindString(5, entity.getLicenceNumber());
    }

    @Override
    protected final void attachEntity(Driver entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    @Override
    public Driver readEntity(Cursor cursor, int offset) {
        Driver entity = new Driver( //
            cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // firstName
            cursor.getString(offset + 2), // lastName
            cursor.getString(offset + 3), // phone
            cursor.getString(offset + 4) // licenceNumber
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Driver entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setFirstName(cursor.getString(offset + 1));
        entity.setLastName(cursor.getString(offset + 2));
        entity.setPhone(cursor.getString(offset + 3));
        entity.setLicenceNumber(cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Driver entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(Driver entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Driver entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
